{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fff08314-fd45-4ae7-a6bc-6ca88cc969b0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "e\n"
     ]
    }
   ],
   "source": [
    "# String Manipulation \n",
    "a= \"Hello World!\"\n",
    "# Print the character at index 1 of the string 'a'.\n",
    "print(a[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ec15ba3f-961b-42d5-9e6d-688551594bc2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lo \n"
     ]
    }
   ],
   "source": [
    "b = \"Hello  World!\"\n",
    "# Print the substring of 'b' starting from index 3 up to, but not including, index 7.\n",
    "print(b[3:6])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b9348957-e83f-4239-b8e9-0317f9cb9c6b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13\n",
      "HELLO, WORLD!\n",
      "hello, world!\n",
      "Hello, Forld!\n"
     ]
    }
   ],
   "source": [
    "# Example for upper, lower and replace\n",
    "\n",
    "a = \"Hello, World!\"\n",
    "# Print the length of the string 'a'\n",
    "print(len(a))\n",
    "# Convert the string 'a' to uppercase\n",
    "print(a.upper())\n",
    "# Convert the string 'a' to lowercase\n",
    "print(a.lower())\n",
    "# Replace all occurrences of the character 'W' with 'F' in the string 'a'\n",
    "print(a.replace(\"W\", \"F\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7fd3bffe-8694-4a4a-a84b-de27ceeae9d7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello World\n",
      "text based analysis\n"
     ]
    }
   ],
   "source": [
    "a = \"Hello\"\n",
    "b = \"World\"\n",
    "# Concatenate the strings 'a' and 'b'\n",
    "c = a + \" \" + b\n",
    "# Print the concatenated string 'c'\n",
    "print(c)\n",
    "# Example for lower()\n",
    "t = \"Text Based Analysis\"\n",
    "# Convert the string 't' to lowercase using the lower() method\n",
    "lowercase_text = t.lower()\n",
    "# Print the lowercase version of the string 't'\n",
    "print(lowercase_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e5779571-695b-407c-9de1-54cc60d68c5a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data science\n",
      "Data Science\n"
     ]
    }
   ],
   "source": [
    "t = \"Data science\"\n",
    "# Remove leading whitespace characters from the string 't'\n",
    "stripped_text=t.lstrip()\n",
    "print(stripped_text)\n",
    "\n",
    "# Reassign the string \"## Data Science\" to the variable 't'\n",
    "t=\"#########Data Science\"\n",
    "# Remove leading '#' characters from the string 't'\n",
    "stripped_text=t.lstrip(\"#\")\n",
    "print(stripped_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "eca9b39a-d0ab-4333-8db8-fdda472d92ae",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Text Based\n"
     ]
    }
   ],
   "source": [
    "t = \"Text Based\"\n",
    "# Remove trailing whitespace characters from the string 't'\n",
    "stripped_text=t.rstrip()\n",
    "print(stripped_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1a673668-3367-4c20-b298-018e323323da",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Text Analysis\n"
     ]
    }
   ],
   "source": [
    "t = \"Text Analysis\"\n",
    "# Remove leading and trailing whitespace characters from the string 't'\n",
    "stripped_text=t.strip()\n",
    "print(stripped_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8935a16c-f9af-4d00-a165-75b697a4eb22",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Text Based Analysis\n"
     ]
    }
   ],
   "source": [
    "t = \"Text Based Analysis\"\n",
    "# Remove leading and trailing '#' characters from the string 't'\n",
    "stripped_text=t.strip(\"#\")\n",
    "print(stripped_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b81a393f-0238-4a89-9944-081412753622",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n"
     ]
    }
   ],
   "source": [
    "# Example for endswith() with different substring\n",
    "result = t.endswith(\"Text\")\n",
    "# Check if the string stored in the variable 't' ends with the substring \"Text\".\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0ee3bb67-d746-4405-bbd8-f5733a7c3247",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "# Example for find()\n",
    "t = \"Text Based Analysis\"\n",
    "# Find the index of the substring \"Based\" in the string 't\n",
    "index = t.find(\"Based\")\n",
    "print(index)\n",
    "\n",
    "# Example for find() with non-existing substring\n",
    "index = t.find(\"\")\n",
    "# Find the index of an empty substring in the string 't'\n",
    "print(index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ef87237f-dd70-491a-8270-b0e1ab55b736",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tBas\n"
     ]
    }
   ],
   "source": [
    "# Original string\n",
    "string = \"TextBased \"\n",
    "# Extract a substring from index 3 to index 7 of the string 'string'\n",
    "# and assign it to the variable 'substring'.\n",
    "substring = string[3:7]\n",
    "print(substring)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "16e298dc-d5d6-4f4f-ac75-138b69d22478",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Text, Based, Analysis\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# String Concatenation\n",
    "# Original strings\n",
    "str1 = \"Text\"\n",
    "str2 = \"Based\"\n",
    "str3 = \"Analysis\"\n",
    "# Concatenating strings\n",
    "string = str1 + \", \" + str2 + \", \"+str3\n",
    "print(string)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "13d75028-5fad-465e-b928-6f74ae5f8f96",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The word 'Python' occurs 2 times in the string.\n"
     ]
    }
   ],
   "source": [
    "# Define the string\n",
    "string = \"Python is a widely-used programming language. Python is known for its simplicity and versatility.\"\n",
    "# Define the word to count\n",
    "word_to_count = \"Python\"\n",
    "# Count the occurrences of the word in the string\n",
    "count = string.lower().count(word_to_count.lower())\n",
    "# Print the result\n",
    "print(f\"The word '{word_to_count}' occurs {count} times in the string.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6bc2382d-b4b2-4d55-a534-98cde59dea91",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The substring 'dark' appears 8 times in the string.\n"
     ]
    }
   ],
   "source": [
    "# Define the string\n",
    "string = \"In a dark, dark town, there was a dark, dark street. In the dark, dark street, there was a dark, dark house.\"\n",
    "# Define the substring to count\n",
    "substring = \"dark\"\n",
    "# Count the occurrences of the substring in the string\n",
    "count = string.count(substring)\n",
    "# Print the result\n",
    "print(f\"The substring '{substring}' appears {count} times in the string.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "6df87bbe-c7de-4c8f-ba3b-9916a8458eaa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['123-456-7890']\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "# Original string\n",
    "string = \"The phone number is 123-456-7890. Please call at that number.\"\n",
    "# Pattern to match\n",
    "pattern = r\"\\b\\d{3}-\\d{3}-\\d{4}\\b\"  # This pattern matches phone numbers in the format xxx-xxx-xxxx.\n",
    "# Finding matches\n",
    "matches = re.findall(pattern, string)\n",
    "# Print the matches\n",
    "print(matches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "86691a86-1e1a-429d-976b-dd8919c7c017",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['example@example.com', 'support@domain.com']\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "# Original text containing email addresses\n",
    "text = \"Contact us at example@example.com or support@domain.com\"\n",
    "\n",
    "# Pattern to match email addresses\n",
    "pattern = r\"\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b\"\n",
    "\n",
    "# Finding email addresses\n",
    "email_addresses = re.findall(pattern, text)\n",
    "print(email_addresses)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "14a5b912-6858-4545-a17c-fe11423dc2e2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found numerical values: ['.99', '', '', '']\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "# Original text containing numerical values\n",
    "text = \"The price of the product is $50.99. Offer valid till 2024-12-31.\"\n",
    "\n",
    "# Pattern to match numerical values (including decimal numbers and dates)\n",
    "pattern = r\"\\d+(\\.\\d+)?|\\d{4}-\\d{2}-\\d{2}\"\n",
    "\n",
    "# Finding numerical values\n",
    "numerical_values = re.findall(pattern, text)\n",
    "print(\"Found numerical values:\", numerical_values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "1d3fc35b-0ac6-4426-b288-3779cf606ed0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The puppy sat on the mat.\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "# Original string\n",
    "string = \"The cat sat on the mat.\"\n",
    "\n",
    "# Pattern to find\n",
    "pattern = r\"\\bcat\\b\"\n",
    "\n",
    "# Replacing substring\n",
    "replaced_string = re.sub(pattern, \"puppy\", string)\n",
    "\n",
    "print(replaced_string)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "31cbf589-1640-4dab-91bb-a69d41dcdbf1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are NUM types of people in the world: those who understand binary and those who don't.\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "# Original string\n",
    "string = \"There are 10 types of people in the world: those who understand binary and those who don't.\"\n",
    "\n",
    "# Pattern to find digits\n",
    "pattern = r\"\\d+\"\n",
    "\n",
    "# Replacing digits with a fixed string\n",
    "replaced_string = re.sub(pattern, \"NUM\", string)\n",
    "print(replaced_string)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "1d15c202-bdbf-4f93-84ae-c2ad0aa6ceb9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Strawberry', 'blueberry', 'berry', 'dates']\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "# Original string\n",
    "string = \"Strawberry;blueberry;berry;dates\"\n",
    "\n",
    "# Pattern for splitting using semicolon (;)\n",
    "substrings = re.split(\";\", string)\n",
    "print(substrings)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5c24adf4-086a-4fc4-acc4-0df7788c19c5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
